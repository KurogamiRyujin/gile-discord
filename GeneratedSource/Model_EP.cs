// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Factors;
using MicrosoftResearch.Infer.Collections;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 4:22 PM on Friday, 16 March 2018.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>Message to marginal of 'vbool0'</summary>
		public Bernoulli vbool0_marginal_F;
		/// <summary>Message to marginal of 'vbool5'</summary>
		public Bernoulli vbool5_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool0") {
				return this.Vbool0Marginal();
			}
			if (variableName=="vbool5") {
				return this.Vbool5Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			// The constant 'vBernoulli1'
			Bernoulli vBernoulli1 = Bernoulli.FromLogOdds(-1.3862943611198906);
			this.vbool0_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool0_selector_B = Bernoulli.Uniform();
			// Message to 'vbool0_marginal' from Variable factor
			this.vbool0_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(vbool0_selector_B, vBernoulli1, this.vbool0_marginal_F);
			Bernoulli vbool5_F = Bernoulli.Uniform();
			// The constant 'vBernoulli2'
			Bernoulli vBernoulli2 = Bernoulli.FromLogOdds(0.40546510810816422);
			DistributionStructArray<Bernoulli,bool> vbool0_selector_cases_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vbool0_selector_cases' Forwards messages.
			vbool0_selector_cases_F = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				vbool0_selector_cases_F[_iv] = Bernoulli.Uniform();
			}
			DistributionStructArray<Bernoulli,bool>[] vbool0_selector_cases_uses_F = default(DistributionStructArray<Bernoulli,bool>[]);
			DistributionStructArray<Bernoulli,bool>[] vbool0_selector_cases_uses_B = default(DistributionStructArray<Bernoulli,bool>[]);
			// Create array for 'vbool0_selector_cases_uses' Forwards messages.
			vbool0_selector_cases_uses_F = new DistributionStructArray<Bernoulli,bool>[2];
			// Create array for 'vbool0_selector_cases_uses' Backwards messages.
			vbool0_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[2];
			for(int _ind = 0; _ind<2; _ind++) {
				// Create array for 'vbool0_selector_cases_uses' Forwards messages.
				vbool0_selector_cases_uses_F[_ind] = new DistributionStructArray<Bernoulli,bool>(2);
				// Create array for 'vbool0_selector_cases_uses' Backwards messages.
				vbool0_selector_cases_uses_B[_ind] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _iv = 0; _iv<2; _iv++) {
					vbool0_selector_cases_uses_B[_ind][_iv] = Bernoulli.Uniform();
					vbool0_selector_cases_uses_F[_ind][_iv] = Bernoulli.Uniform();
				}
			}
			// Message to 'vbool0_selector_cases' from Cases factor
			vbool0_selector_cases_F = CasesOp.CasesAverageConditional<DistributionStructArray<Bernoulli,bool>>(vBernoulli1, vbool0_selector_cases_F);
			// Message to 'vbool0_selector_cases_uses' from Replicate factor
			vbool0_selector_cases_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Bernoulli,bool>>(vbool0_selector_cases_uses_B, vbool0_selector_cases_F, 1, vbool0_selector_cases_uses_F[1]);
			DistributionStructArray<Bernoulli,bool> vbool5__F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vbool5_' Forwards messages.
			vbool5__F = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _gateind = 0; _gateind<2; _gateind++) {
				vbool5__F[_gateind] = Bernoulli.Uniform();
			}
			// Message to 'vbool5_' from Copy factor
			vbool5__F[0] = ArrayHelper.SetTo<Bernoulli>(vbool5__F[0], vBernoulli2);
			this.vbool5_marginal_F = Bernoulli.Uniform();
			// Message from use of 'vbool5'
			Bernoulli vbool5_use_B = Bernoulli.Uniform();
			// The constant 'vBernoulli3'
			Bernoulli vBernoulli3 = Bernoulli.FromLogOdds(-0.40546510810816427);
			// Message to 'vbool5_' from Copy factor
			vbool5__F[1] = ArrayHelper.SetTo<Bernoulli>(vbool5__F[1], vBernoulli3);
			// Message to 'vbool5' from Exit factor
			vbool5_F = BeliefPropagationGateExitOp.ExitAverageConditional<Bernoulli>(vbool0_selector_cases_uses_F[1], vbool5__F, vbool5_F);
			// Message to 'vbool5_marginal' from DerivedVariable factor
			this.vbool5_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool5_use_B, vbool5_F, this.vbool5_marginal_F);
			this.Constant_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool0Marginal()
		{
			return this.vbool0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool5Marginal()
		{
			return this.vbool5_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
